{
  pkgs,
  lib,
  ...
}: let
  quantum = 64;
  rate = 48000;
  qr = "${toString rate}/${toString quantum}";
in {
  # Enable sound with Pipewire
  security.rtkit.enable = true;
  services.pipewire = {
    enable = true; # Enable Pipewire
    alsa = {
      enable = true;
      support32Bit = true;
    };
    pulse.enable = true; # Enable PulseAudio support

    extraConfig.pipewire = {
      "99-lowlatency" = {
        context = {
          properties.default.clock.min-quantum = 64;
          modules = [
            {
              name = "libpipewire-module-rtkit";
              flags = ["ifexists" "nofail"];
              args = {
                nice.level = -15;
                rt = {
                  prio = 88;
                  time.soft = 200000;
                  time.hard = 200000;
                };
              };
            }
            {
              name = "libpipewire-module-protocol-pulse";
              args = {
                server.address = ["unix:native"];
                pulse.min = {
                  req = qr;
                  quantum = qr;
                  frag = qr;
                };
              };
            }
          ];

          stream.properties = {
            node.latency = qr;
            resample.quality = 1;
          };
        };
      };
      "10-bluez" = {
        "monitor.bluez.properties" = {
          "bluez5.enable-sbc-xq" = true;
          "bluez5.enable-msbc" = true;
          "bluez5.enable-hw-volume" = true;
          "bluez5.codecs" = ["sbc" "sbc_xq" "aac" "ldac" "aptx" "aptx_hd"];
        };
      };
    };

    wireplumber = {
      enable = true; # Enable WirePlumber
      configPackages = let
        # Generate "matches" section of the rules
        matches = lib.generators.toLua {
          multiline = false; # Looks better while inline
          indent = false;
        } [[["node.name" "matches" "alsa_output.*"]]]; # Nested lists to produce `{{{ }}}` in the output

        # Generate "apply_properties" section of the rules
        apply_properties = lib.generators.toLua {} {
          "audio.format" = "S32LE";
          "audio.rate" = rate * 2;
          "api.alsa.period-size" = 2;
        };
      in [
        (pkgs.writeTextDir "share/lowlatency.lua.d/99-alsa-lowlatency.lua" ''
          -- Generated by nix-gaming
          alsa_monitor.rules = {
            {
              matches = ${matches};
              apply_properties = ${apply_properties};
            }
          }
        '')
      ];
    };
  };

  hardware = {
    pulseaudio.support32Bit = true;

    bluetooth = {
      enable = true;
      powerOnBoot = false;
      package = pkgs.bluez5-experimental;
    };
  };
}
