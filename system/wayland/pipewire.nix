{
  pkgs,
  lib,
  ...
}: let
  quantom = 64;
  rate = 48000;
  qr = "${toString 64}/${toString 48000}";
in {
  # Enable sound with pipewire.
  security.rtkit.enable = true;
  services.pipewire = {
    enable = true;
    alsa.enable = true;
    alsa.support32Bit = true;
    pulse.enable = true;
    # If you want to use JACK applications, uncomment this
    #jack.enable = true;

    # use the example session manager (no others are packaged yet so this is enabled by default,
    # no need to redefine it in your config for now)
    #media-session.enable = true;
    extraConfig.pipewire = {
      "99-lowlatency" = {
        context = {
          properties.default.clock.min-quantum = 64;
          modules = [
            {
              name = "libpipewire-module-rtkit";
              flags = ["ifexists" "nofail"];
              args = {
                nice.level = -15;
                rt = {
                  prio = 88;
                  time.soft = 200000;
                  time.hard = 200000;
                };
              };
            }
            {
              name = "libpipewire-module-protocol-pulse";
              args = {
                server.address = ["unix:native"];
                pulse.min = {
                  req = qr;
                  quantum = qr;
                  frag = qr;
                };
              };
            }
          ];

          stream.properties = {
            node.latency = qr;
            resample.quality = 1;
          };
        };
      };
    };

    wireplumber = {
      enable = true;
      configPackages = let
        # generate "matches" section of the rules
        matches = lib.generators.toLua {
          multiline = false; # looks better while inline
          indent = false;
        } [[["node.name" "matches" "alsa_output.*"]]]; # nested lists are to produce `{{{ }}}` in the output

        # generate "apply_properties" section of the rules
        apply_properties = lib.generators.toLua {} {
          "audio.format" = "S32LE";
          "audio.rate" = rate * 2;
          "api.alsa.period-size" = 2;
        };
      in [
        (pkgs.writeTextDir "share/lowlatency.lua.d/99-alsa-lowlatency.lua" ''
          -- Generated by nix-gaming
          alsa_monitor.rules = {
            {
              matches = ${matches};
              apply_properties = ${apply_properties};
            }
          }
        '')
      ];
    };
  };
}
